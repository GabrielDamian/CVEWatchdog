"minipass": "^4.0.0",  
"libxmljs": "^0.19.7",  
"license": "ISC",  
undici: 5.28.3  
undici: 5.28.3  
false  
version:  
version:  
undici: 5.24.0  
 
'@octokit/core': 5.0.0  
 
'@octokit/core': 5.0.0  
busboy: 1.6.0  
semver: 6.3.0  
semver: 6.3.0  
semver: 6.3.0  
fsevents: 2.3.2  
semver: 6.3.0  
false  
undici: 5.28.3  
"4.9.3", "4.9.3",  
specifier: 4.9.3 version: 4.9.3  
specifier: 4.9.3 version: 4.9.3  
node-fetch: 2.6.7  
fsevents: 2.3.2  
- uses: # v1.6.2  
- uses: # v1.6.2  
- uses: # v1.6.2  
"@sveltejs/kit": "^1.27.0",  
"^2.4.1",  
"undici": "~5.26.2"  
"svelte": "^3.54.0 || ^4.0.0-next.0",  
"svelte": "^3.54.0 || ^4.0.0",  
"@sveltejs/kit": "^1.27.0",  
- uses: # v1.6.2  
- uses: # v1.6.2  
- uses: # v1.6.2  
- uses: # v1.6.2  
"@sveltejs/kit": "^1.27.0",  
"^2.4.1",  
"undici": "~5.26.2"  
"svelte": "^3.54.0 || ^4.0.0-next.0",  
"svelte": "^3.54.0 || ^4.0.0",  
"@sveltejs/kit": "^1.27.0",  
"firebase-admin": "^11.11.0",  
"devOptional": true,  
"@firebase/util": "1.9.3",  
"0.9.0", "@firebase/util": "1.9.3"  
"google-gax": "^3.5.7", "protobufjs": "^7.2.5"  
"node": ">=12.0.0"  
"node": ">=10"  
"node": ">=12.0.0"  
"node": ">=12"  
"duplexify": "^4.0.0",  
"retry-request": "^5.0.0", "teeny-request": "^8.0.0",  
"node": ">=12"  
"^0.7.0", "@types/node": ">=12.12.47"  
"node": "^8.13.0 || >=10.10.0"  
"devOptional": true,  
"devOptional": true  
"debug": "4"  
"node": ">= 6.0.0"  
"stream-shift": "^1.0.0"  
"devOptional": true,  
"^6.6.0", "^6.9.5"  
"^5.0.0",  
"node-fetch": "^2.6.9"  
"node": ">=12"  
"gaxios": "^5.0.0",  
"node": ">=12"  
"arrify": "^2.0.0",  
"node": ">=12"  
"@grpc/grpc-js": "~1.8.0",  
"@types/rimraf": "^3.0.2",  
"node": ">=12.0.0"  
"dependencies": { "node-forge": "^1.3.1" },  
"devOptional": true  
"gaxios": "^5.0.1", "google-p12-pem": "^4.0.0",  
"node": ">=12.0.0"  
"agent-base": "6",  
"node": ">= 6"  
"devOptional": true,  
"protobufjs": "^7.0.0"  
"node": ">=12.0.0"  
"debug": "^4.1.1", "extend": "^3.0.2"  
"node": ">=12"  
"devOptional": true,  
"node-fetch": "^2.6.1",  
"node": ">=12"  
"firebase-admin": "^11.11.0",  
"@sveltejs/kit": "^1.27.0",  
"^2.4.1",  
"undici": "~5.26.2"  
"svelte": "^3.54.0 || ^4.0.0-next.0",  
"^1.0.3",  
"magic-string": "^0.30.0", "svelte-hmr": "^0.15.2",  
"svelte": "^3.54.0 || ^4.0.0",  
"^1.4.13"  
"svelte": "^3.19.0 || ^4.0.0-next.0"  
"vite": "^3.0.0 || ^4.0.0"  
"@sveltejs/kit": "^1.27.0",  
- uses: # v1.6.2  
- uses: # v1.6.2  
- uses: # v 1.6.2  
- uses: # v1.6.2  
- uses: # v1.6.2  
uses: # v1.6.2  
"version": "2.0.7",  
"version": "2.0.7",  
"undici": "5.28.3",  
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
"version": "3.6.0-next.2",  
"version": "5.28.3",  
"license": "MIT",  
"version": "3.6.0-next.2",  
"^3.6.0-next.2"  
undici: 5.28.3  
undici: 5.28.3  
"undici": "^5.28.3"  
specifier: ^5.28.3 version: 5.28.3  
version:  
undici: 5.28.3  
 
 
immutable: 5.0.0-beta.5  
 
 
immutable: 5.0.0-beta.5  
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
undici: 5.28.3  
undici: 5.28.3  
"name":  
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
// 3. If parsedMetadata is the empty set, return true.  
// 4. Let metadata be the result of getting the strongest  
// 5. For each item in metadata:  
let expectedValue = item.hash  
if { expectedValue = -2) }  
if { actualValue = -2)  
if (actualValue === expectedValue) { return true }  
let actualBase64URL =  
if (actualBase64URL === expectedValue) {  
// 6. Return false.  
const supportedHashes = crypto.getHashes()  
if (parsedToken === null || parsedToken.groups === undefined) {  
const algorithm =  
if {  
 
undici: 5.28.3  
undici: 5.28.3  
"version": "0.0.4",  
"version": "0.0.4",  
